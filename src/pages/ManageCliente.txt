import React, { useState } from "react";
import {
  Box,
  Button,
  ButtonGroup,
  Typography,
  Paper,
  Stack,
  useMediaQuery,
  useTheme,
} from "@mui/material";
import { DataGrid } from "@mui/x-data-grid";
import { useAuth } from "../components/authcontext";
import { can } from "../utils/can";
import Cliente2FormDialog from "../components/Cliente2FormDialog";

/**
 * Renders either a table or card list of clients, each with Edit/Delete/Gestionar.
 * “Gestionar” opens the full client management dialog (Cliente2FormDialog).
 */
const ManageCliente = ({ clientes = [], onEdit, onDelete }) => {
  const { role } = useAuth();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [modo, setModo] = useState(isMobile ? "tarjeta" : "tabla");
  const [openDialog, setOpenDialog] = useState(false);
  const [selectedClient, setSelectedClient] = useState(null);

  // Build rows that include the *original* client object
  const rows = clientes.map((c) => ({
    id: c.id_cliente,
    usuario: c.usuario?.nombre || "—",
    email: c.usuario?.email || "—",
    fecha_registro: c.fecha_registro || "—",
    saldo: typeof c.saldo === "number" ? `$${c.saldo}` : "—",
    __clientObj: c,               // keep original here
  }));

  const handleManageClick = (clientObj) => {
    setSelectedClient(clientObj);
    setOpenDialog(true);
  };

  const columns = [
    {
      field: "usuario",
      headerName: "Usuario",
      flex: 1,
      renderCell: (params) =>
        `${params.row.usuario} (${params.row.email})`,
    },
    { field: "fecha_registro", headerName: "Fecha Registro", flex: 1 },
    { field: "saldo", headerName: "Saldo", flex: 1 },
    {
      field: "actions",
      headerName: "Acciones",
      sortable: false,
      flex: 1,
      renderCell: (params) => {
        const client = params.row.__clientObj;
        return (
          <Box display="flex" gap={1}>
            {can(role, "edit", "cliente") && (
              <Button
                size="small"
                onClick={() => onEdit(client)}
              >
                Editar
              </Button>
            )}
            {can(role, "delete", "cliente") && (
              <Button
                size="small"
                color="error"
                onClick={() => onDelete(client.id_cliente)}
              >
                Eliminar
              </Button>
            )}
            <Button
              size="small"
              color="primary"
              onClick={() => handleManageClick(client)}
            >
              Gestionar
            </Button>
          </Box>
        );
      },
    },
  ];

  return (
    <Box mt={3}>
      {/* Mode toggle */}
      <Box mb={2}>
        <ButtonGroup variant="outlined" size="small">
          <Button onClick={() => setModo("tabla")} disabled={modo === "tabla"}>
            Tabla
          </Button>
          <Button onClick={() => setModo("tarjeta")} disabled={modo === "tarjeta"}>
            Tarjetas
          </Button>
        </ButtonGroup>
      </Box>

      {modo === "tabla" ? (
        <Box sx={{ width: "100%", overflowX: "auto" }}>
          <Box sx={{ minWidth: 600 }}>
            <DataGrid
              rows={rows}
              columns={columns}
              pageSize={5}
              rowsPerPageOptions={[5]}
              autoHeight
              disableSelectionOnClick
              localeText={{
                noRowsLabel: "No hay clientes",
              }}
            />
          </Box>
        </Box>
      ) : (
        <Stack spacing={2}>
          {rows.map((r) => (
            <Paper key={r.id} sx={{ p: 2, borderRadius: 2 }}>
              <Typography>
                <strong>Usuario:</strong> {r.usuario}
              </Typography>
              <Typography>
                <strong>Email:</strong> {r.email}
              </Typography>
              <Typography>
                <strong>Fecha Registro:</strong> {r.fecha_registro}
              </Typography>
              <Typography>
                <strong>Saldo:</strong> {r.saldo}
              </Typography>
              <Box mt={1} display="flex" gap={1}>
                {can(role, "edit", "cliente") && (
                  <Button size="small" onClick={() => onEdit(r.__clientObj)}>
                    Editar
                  </Button>
                )}
                {can(role, "delete", "cliente") && (
                  <Button
                    size="small"
                    color="error"
                    onClick={() => onDelete(r.__clientObj.id_cliente)}
                  >
                    Eliminar
                  </Button>
                )}
                <Button
                  size="small"
                  color="primary"
                  onClick={() => handleManageClick(r.__clientObj)}
                >
                  Gestionar
                </Button>
              </Box>
            </Paper>
          ))}
          {rows.length === 0 && (
            <Typography color="textSecondary">No hay clientes disponibles</Typography>
          )}
        </Stack>
      )}

      {/* Client management dialog */}
      {selectedClient && (
        <Cliente2FormDialog
          open={openDialog}
          setOpen={setOpenDialog}
          clientList={clientes}
          selectedClient={selectedClient}
        />
      )}
    </Box>
  );
};

export default ManageCliente;
