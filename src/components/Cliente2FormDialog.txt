import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  CircularProgress,
  Alert,
  Typography,
  Box,
} from "@mui/material";
import { useClientData } from "../hooks/useClientData";
import { useResourceFetch } from "../hooks/useResourceFetch";

import CompraFormDialog from "./CompraFormDialog";
import ArriendoFormDialog from "./ArriendoFormDialog";
import SesionGroupFormDialog from "./SesionGroupFormDialog";

const Cliente2FormDialog = ({
  open,
  setOpen,
  clientList,
  selectedClient: propClient,
}) => {
  // Local state for sub‑dialogs
  const [openCompraDialog, setOpenCompraDialog] = useState(false);
  const [openArriendoDialog, setOpenArriendoDialog] = useState(false);
  const [openSesionDialog, setOpenSesionDialog] = useState(false);

  // Client data hook
  const {
    selectedClient: clientData,
    setSelectedClient,
    compras,
    sesionGroups,
    arriendos,
    loading: loadingClient,
    error: errorClient,
    fetchClientData,
  } = useClientData();

  // Resource hook
  const {
    productos,
    salas,
    terapias,
    variantes,
    loadingResources,
    errorResources,
  } = useResourceFetch(!!open);

  // Sync external prop to hook state
  useEffect(() => {
    if (propClient?.id_cliente !== clientData?.id_cliente) {
      setSelectedClient(propClient);
      fetchClientData(propClient?.id_cliente);
    }
  }, [propClient]);

  const isBusy = loadingClient || loadingResources;
  const errorMessage = errorClient || errorResources;

  return (
    <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth="md">
      <DialogTitle>Gestión del Cliente</DialogTitle>
      <DialogContent dividers>
        {/* Client selector */}
        <FormControl fullWidth margin="normal" disabled={isBusy}>
          <InputLabel id="client-select-label">Cliente</InputLabel>
          <Select
            labelId="client-select-label"
            value={clientData?.id_cliente || ""}
            onChange={(e) => {
              const clientId = e.target.value;
              const sel = clientList.find((c) => c.id_cliente === clientId);
              setSelectedClient(sel);
              fetchClientData(clientId);
            }}
            label="Cliente"
          >
            {clientList?.map((c) => (
              <MenuItem key={c.id_cliente} value={c.id_cliente}>
                {c.usuario?.nombre || "Sin nombre"}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        {/* Global spinner and errors */}
        {isBusy && (
          <Box textAlign="center" my={2}>
            <CircularProgress />
          </Box>
        )}
        {errorMessage && <Alert severity="error">{errorMessage}</Alert>}

        {/* Client history & actions */}
        {!isBusy && clientData && (
          <>
            <Typography variant="h6" gutterBottom>
              Historial del Cliente
            </Typography>

            <SectionList
              title="Compras"
              items={compras}
              renderItem={(compra) =>
                compra.productosComprados.map((pc) => (
                  <Typography
                    key={pc.id || pc.producto?.id}
                    variant="body2"
                  >
                    {pc.producto?.nombre} - {pc.cantidad} unidad(es)
                  </Typography>
                ))
              }
              emptyMessage="No hay compras"
            />

            <SectionList
              title="Grupos de Sesión"
              items={sesionGroups}
              renderItem={(g) => (
                <Typography key={g.id_sesion_group} variant="body2">
                  {g.terapia?.nombre} - {g.descripcion}
                </Typography>
              )}
              emptyMessage="No hay sesiones"
            />

            <SectionList
              title="Arriendos"
              items={arriendos}
              renderItem={(a) => (
                <Typography key={a.id_arriendo} variant="body2">
                  {a.sala?.nombre} - {a.fecha} - ${a.monto_pagado}
                </Typography>
              )}
              emptyMessage="No hay arriendos"
            />

            <Box mt={2} display="flex" gap={1}>
              <Button
                variant="contained"
                disabled={!clientData}
                onClick={() => setOpenCompraDialog(true)}
              >
                Crear Compra
              </Button>
              <Button
                variant="contained"
                disabled={!clientData}
                onClick={() => setOpenSesionDialog(true)}
              >
                Nueva Sesión
              </Button>
              <Button
                variant="contained"
                disabled={!clientData}
                onClick={() => setOpenArriendoDialog(true)}
              >
                Nuevo Arriendo
              </Button>
            </Box>
          </>
        )}
      </DialogContent>

      <DialogActions>
        <Button onClick={() => setOpen(false)} color="secondary">
          Cerrar
        </Button>
      </DialogActions>

      {/* Sub‑dialogs: onSave only refetch if a real save occurred */}
      <CompraFormDialog
        open={openCompraDialog}
        onClose={() => setOpenCompraDialog(false)}
        onSave={(saved) => {
          if (saved) fetchClientData(clientData.id_cliente);
          setOpenCompraDialog(false);
        }}
        clientes={[clientData]}
        productos={productos}
      />

      <SesionGroupFormDialog
        open={openSesionDialog}
        onClose={() => setOpenSesionDialog(false)}
        onSave={(saved) => {
          if (saved) fetchClientData(clientData.id_cliente);
          setOpenSesionDialog(false);
        }}
        clientes={[clientData]}
        terapias={terapias}
        variantes={variantes}
      />

      <ArriendoFormDialog
        open={openArriendoDialog}
        onClose={() => setOpenArriendoDialog(false)}
        onSave={(saved) => {
          if (saved) fetchClientData(clientData.id_cliente);
          setOpenArriendoDialog(false);
        }}
        salas={salas}
        clientes={[clientData]}
      />
    </Dialog>
  );
};

/** Helper list section with stable keys and graceful empty state */
const SectionList = ({ title, items, renderItem, emptyMessage }) => (
  <Box mb={2}>
    <Typography variant="subtitle1">{title}</Typography>
    {Array.isArray(items) && items.length > 0 ? (
      <Box>
        {items.map((item) => (
          <Box key={item.id || JSON.stringify(item)}>
            {renderItem(item)}
          </Box>
        ))}
      </Box>
    ) : (
      <Typography variant="body2" color="textSecondary">
        {emptyMessage}
      </Typography>
    )}
  </Box>
);

export default Cliente2FormDialog;
